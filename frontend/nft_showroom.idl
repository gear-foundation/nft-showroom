type Config = struct {
  gas_for_creation: u64,
  gas_for_mint: u64,
  gas_for_transfer_token: u64,
  gas_for_close_auction: u64,
  gas_for_delete_collection: u64,
  gas_for_get_info: u64,
  time_between_create_collections: u64,
  royalty_to_marketplace_for_trade: u16,
  royalty_to_marketplace_for_mint: u16,
  ms_in_block: u32,
  fee_per_uploaded_file: u128,
  max_creator_royalty: u16,
  max_number_of_images: u64,
};

type Offer = struct {
  collection_address: actor_id,
  token_id: u64,
  creator: actor_id,
};

type StorageState = struct {
  admins: vec actor_id,
  collection_to_owner: vec struct { actor_id, struct { str, actor_id } },
  time_creation: vec struct { actor_id, u64 },
  type_collections: vec struct { str, TypeCollectionInfo },
  sales: vec struct { struct { actor_id, u64 }, NftInfoForSale },
  auctions: vec struct { struct { actor_id, u64 }, Auction },
  offers: vec struct { Offer, u128 },
  config: Config,
  minimum_value_for_trade: u128,
  allow_message: bool,
  allow_create_collection: bool,
};

/// * code_id - code_id is used to create a collection by that CodeId,
///   the admin should preload the NFT contract and specify in the marketplace so that regular users can use it
/// * idl_link -  it is necessary to set a reference where the idl of this collection type will be stored for further interaction with the contract
/// * type_description - description of this type of collection
type TypeCollectionInfo = struct {
  code_id: code_id,
  idl_link: str,
  type_description: str,
  allow_create: bool,
};

type NftInfoForSale = struct {
  price: u128,
  token_owner: actor_id,
  collection_owner: actor_id,
  royalty: u16,
};

type Auction = struct {
  owner: actor_id,
  started_at: u64,
  ended_at: u64,
  current_price: u128,
  current_winner: actor_id,
  collection_owner: actor_id,
  royalty: u16,
};

type CollectionInfo = struct {
  owner: actor_id,
  type_name: str,
  idl_link: str,
};

constructor {
  New : (config: Config);
};

service NftShowroom {
  AcceptOffer : (offer: Offer) -> null;
  AddAdmins : (users: vec actor_id) -> null;
  AddBid : (collection_address: actor_id, token_id: u64) -> null;
  AddExternalCollection : (collection_address: actor_id, type_name: str) -> null;
  AddNewCollection : (code_id: code_id, idl_link: str, type_name: str, type_description: str, allow_create: bool) -> null;
  AllowCreateCollection : (allow: bool) -> null;
  AllowMessage : (allow: bool) -> null;
  BalanceOut : () -> null;
  Buy : (collection_address: actor_id, token_id: u64) -> null;
  CancelAuction : (collection_address: actor_id, token_id: u64) -> null;
  CancelOffer : (collection_address: actor_id, token_id: u64) -> null;
  CancelSale : (collection_address: actor_id, token_id: u64) -> null;
  CloseAuction : (collection_address: actor_id, token_id: u64) -> null;
  CreateAuction : (collection_address: actor_id, token_id: u64, min_price: u128, duration: u32) -> null;
  CreateCollection : (type_name: str, payload: vec u8) -> null;
  CreateOffer : (collection_address: actor_id, token_id: u64) -> null;
  DeleteAdmin : (user: actor_id) -> null;
  DeleteCollection : (collection_address: actor_id) -> null;
  DeleteCollectionType : (type_name: str) -> null;
  Mint : (collection_address: actor_id) -> null;
  Sell : (collection_address: actor_id, token_id: u64, price: u128) -> null;
  UpdateConfig : (gas_for_creation: opt u64, gas_for_mint: opt u64, gas_for_transfer_token: opt u64, gas_for_close_auction: opt u64, gas_for_delete_collection: opt u64, gas_for_get_info: opt u64, time_between_create_collections: opt u64, royalty_to_marketplace_for_trade: opt u16, royalty_to_marketplace_for_mint: opt u16, ms_in_block: opt u32, fee_per_uploaded_file: opt u128, max_creator_royalty: opt u16, max_number_of_images: opt u64) -> null;
  query All : () -> StorageState;
  query GetAdmins : () -> vec actor_id;
  query GetAllCollections : () -> vec struct { actor_id, struct { str, actor_id } };
  query GetAllowCreateCollection : () -> bool;
  query GetAllowMessage : () -> bool;
  query GetCollectionInfo : (collection_address: actor_id) -> opt CollectionInfo;
  query GetCollectionsInfo : () -> vec struct { str, TypeCollectionInfo };
  query GetConfig : () -> Config;
  query GetMinimumValueForTrade : () -> u128;

  events {
    Initialized: struct {
      time_between_create_collections: u64,
      royalty_to_marketplace_for_trade: u16,
      royalty_to_marketplace_for_mint: u16,
      minimum_value_for_trade: u128,
      fee_per_uploaded_file: u128,
      max_creator_royalty: u16,
      max_number_of_images: u64,
    };
    NewCollectionAdded: struct {
      code_id: code_id,
      idl_link: str,
      type_name: str,
      type_description: str,
    };
    CollectionCreated: struct {
      type_name: str,
      collection_address: actor_id,
    };
    Minted: struct {
      collection_address: actor_id,
      minter: actor_id,
    };
    SaleNft: struct {
      collection_address: actor_id,
      token_id: u64,
      price: u128,
      owner: actor_id,
    };
    SaleNftCanceled: struct {
      collection_address: actor_id,
      token_id: u64,
    };
    NftSold: struct {
      collection_address: actor_id,
      token_id: u64,
      price: u128,
      current_owner: actor_id,
    };
    AuctionCreated: struct {
      collection_address: actor_id,
      token_id: u64,
      min_price: u128,
      duration_ms: u32,
    };
    AuctionClosed: struct {
      collection_address: actor_id,
      token_id: u64,
      price: u128,
      current_owner: actor_id,
    };
    BidAdded: struct {
      collection_address: actor_id,
      token_id: u64,
      current_price: u128,
    };
    AuctionCanceled: struct {
      collection_address: actor_id,
      token_id: u64,
    };
    OfferCreated: struct {
      collection_address: actor_id,
      token_id: u64,
      price: u128,
    };
    OfferCanceled: struct {
      collection_address: actor_id,
      token_id: u64,
    };
    OfferAccepted: struct {
      offer: Offer
    };
    CollectionDeleted: struct {
      collection_address: actor_id
    };
    AdminsAdded: struct {
      users: vec actor_id
    };
    AdminDeleted: struct {
      user: actor_id
    };
    ConfigUpdated: struct {
      gas_for_creation: opt u64,
      gas_for_mint: opt u64,
      gas_for_transfer_token: opt u64,
      gas_for_close_auction: opt u64,
      gas_for_delete_collection: opt u64,
      gas_for_get_info: opt u64,
      time_between_create_collections: opt u64,
      royalty_to_marketplace_for_trade: opt u16,
      royalty_to_marketplace_for_mint: opt u16,
      ms_in_block: opt u32,
      minimum_value_for_trade: opt u128,
      fee_per_uploaded_file: opt u128,
      max_creator_royalty: opt u16,
      max_number_of_images: opt u64,
    };
    BalanceHasBeenWithdrawn: struct {
      value: u128
    };
    ValueSent;
    AllowMessageChanged;
    AllowCreateCollectionChanged;
    CollectionTypeDeleted: struct {
      type_name: str
    };
  }
};

